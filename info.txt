Hot Potato Game - Farcaster Mini App Summary

ü•î What We're Building
A Hot Potato game as a Farcaster Mini App where players pay a fee to "steal" a virtual potato. The pot grows with each steal until it "pops," awarding 85% to the last holder and 15% to the owner. Built with Next.js, Solidity smart contract, and Farcaster SDK.

‚úÖ What's Already Built & Deployed

Frontend (Live on Vercel)

URL: https://hotpotatogame.vercel.app/
Tech Stack: Next.js, React, TypeScript, Tailwind CSS
Features: Game UI, Farcaster wallet integration, mock game state
Farcaster Integration: SDK initialized, user authentication, wallet connection

Smart Contract (Ready for Deployment)

Contract: HotPotatoGame.sol - Complete with steal/pop mechanics
Networks: Configured for Base Mainnet and Base Sepolia
Features: Chainlink price feeds, owner controls, emergency functions
Status: Tested on Base Sepolia, ready for mainnet

Farcaster Manifest

File: public/.well-known/farcaster.json
Status: ‚úÖ Live and accessible
Account Association: ‚úÖ Linked to your Farcaster account
Capabilities: actions.signIn, wallet.getEthereumProvider

Registered with farcaster

Entered the domain: hotpotatogame.vercel.app
Complete registration and account Association

üöÄ Next Steps (Priority Order)

1. Wallet connection with wagmi (Immediate)

Use documents to see how wallets are conected with farcaster
Check if Base Sepolia is supported on Farcaster
Connect Frontend to accept wallet connection

2. Deploy Smart Contract to Base Mainnet

3. Connect Frontend to Real Contract

Update hooks/useContract.ts with deployed contract address
Replace mock data with real contract calls
Test full game loop

4. Get User Engagement

Share app with Farcaster community
Get initial users to meet discovery requirements
Monitor app appearance in Farcaster search

üìÅ Key Files

contracts/HotPotatoGame.sol - Smart contract
hooks/useContract.ts - Frontend contract integration
public/.well-known/farcaster.json - Farcaster manifest
hardhat.config.ts - Deployment configuration